#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <100>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        commandclick: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_COMMAND &mkp LCLK>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp ESC         &kp Q             &kp W      &kp E      &kp R      &kp T                         &kp Y  &kp U  &kp I      &kp O    &kp P      &kp BACKSPACE
&kp LCTRL       &kp A             &kp S      &kp D      &kp F      &kp G                         &kp H  &kp J  &kp K      &kp L    &kp SEMI   &kp ENTER
&kp LEFT_SHIFT  &kp Z             &kp X      &kp C      &kp V      &kp B                         &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &mo 2
&kp LEFT_ALT    &kp LEFT_COMMAND  &lt 2 TAB  &kp SPACE  &mkp LCLK             &kp RIGHT_COMMAND  &mo 1                                        &mo 3
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp ESC           &kp Q             &kp W  &kp E      &kp R      &kp T                 &kp Y  &kp U           &kp UP_ARROW  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
&kp LEFT_CONTROL  &kp A             &kp S  &kp D      &kp F      &kp G                 &kp H  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT         &kp BACKSLASH      &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp Z             &kp X  &kp C      &kp V      &kp B                 &kp N  &kp M           &kp COMMA     &kp PERIOD        &kp SLASH          &kp RIGHT_SHIFT
&kp LEFT_ALT      &kp LEFT_COMMAND  &mo 2  &kp SPACE  &mkp RCLK             &mkp LCLK  &none                                                                     &trans
            >;
        };

        number_and_scroll_layer {
            label = "NUM_AND_SCROLL";
            bindings = <
&kp TAB           &kp EXCLAMATION   &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                 &kp LCTRL      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp LEFT_CONTROL  &kp NUMBER_1      &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                      &kp NUMBER_6   &kp N7         &kp N8        &kp N9                &kp N0                 &kp RETURN
&kp LEFT_SHIFT    &trans            &trans        &trans        &trans        &trans                      &trans         &kp MINUS      &kp EQUAL     &kp BACKSLASH         &kp RIGHT_SHIFT        &kp RIGHT_SHIFT
&trans            &kp LEFT_COMMAND  &trans        &kp SPACE     &mkp LCLK                      &mkp RCLK  &kp LG(SPACE)                                                                            &trans
            >;
        };

        function_and_snipe_layer {
            label = "FUNC_AND_SNIPE";
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6              &kp F7  &kp F8  &kp F9  &kt F10  &kp F11  &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans              &trans  &trans  &trans  &trans   &trans   &trans
&trans      &trans        &trans        &trans        &trans        &trans              &trans  &trans  &trans  &trans   &trans   &trans
&trans      &trans        &trans        &trans        &trans                    &trans  &mo 3                                     &trans
            >;
        };

        shift_symbol_layer {
            label = "SHIFT_SYM";
            bindings = <
&kp RG(ESC)           &kp RG(Q)         &kp RG(W)  &kp RG(E)      &kp RG(R)  &kp RG(T)              &kp RG(Y)  &kp RG(U)  &kp RG(I)      &kp RG(O)       &kp RG(P)          &kp TILDE
&kp RG(LEFT_CONTROL)  &kp RG(A)         &kp RG(S)  &kp RG(D)      &kp RG(F)  &kp RG(G)              &kp RG(H)  &kp RG(J)  &kp RG(K)      &kp RG(L)       &kp RG(SEMICOLON)  &kp RG(SQT)
&kp RG(LEFT_SHIFT)    &kp RG(Z)         &kp RG(X)  &kp RG(C)      &kp RG(V)  &kp RG(B)              &kp RG(N)  &kp RG(M)  &kp RG(COMMA)  &kp RG(PERIOD)  &kp QUESTION       &kp RIGHT_SHIFT
&kp RG(LEFT_ALT)      &kp LEFT_COMMAND  &mo 2      &kp RG(SPACE)  &mkp LCLK                 &trans  &none                                                                   &trans
            >;
        };
    };
};
